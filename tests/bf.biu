(extern-raw + (=> Number Number Number) "add")
(extern-raw - (=> Number Number Number) "sub")
(extern-raw * (=> Number Number Number) "mul")
(extern-raw / (=> Number Number Number) "__div")
(extern-raw sin (=> Number Number) "__sin")
(extern-raw = (=> Number Number Bool) "equal")
(extern-raw > (=> Number Number Bool) "greater")
(extern-raw < (=> Number Number Bool) "less")
(extern-raw char-equal? (=> Char Char Bool) "equal_char")
(extern-raw print (=> Number Number) "print")
(extern-raw cos (=> Number Number) "cosclosure")
(extern-raw sin (=> Number Number) "sinclosure")
(extern-raw getchar (=> Char) "getcharclosure")
(extern-raw putchar (=> Char Number) "putcharclosure")
(extern-raw number->char (=> Number Char) "numbertocharclosure")
(extern-raw char->number (=> Char Number) "chartonumberclosure")


(define ((read_program Number)
         (program (Array Char))
         (index Number))

  (define (save-char (c Char))
    (set! program index c)
    (read_program program (+ index 1)))

  (define c (getchar))

  (if (= (char->number c) -1)
    index
    (save-char c)))




(define ((interpret Bool)
         (program (Array Char)))

  (define memory (make-array Char 1000))

  (define ((loop Bool)
           (ptr Number))

    (define (move (offset Number))
      (loop (+ ptr offset)))

    (define (add (amout Number))
      (set! memory ptr
        (number->char (+ amout (char->number (get memory ptr))))))

    (define (read)
      (set! memory ptr (getchar)))

    (define (output)
      (putchar (get memory ptr)))

    (define ((findmatch Number) (ptr Number) (value Number) (offset Number))
      (if (= value 0)
        ptr
        (if (char-equal? (get memory ptr) '[')
          (findmatch (+ ptr offset) (+ value 1) offset)
          (if (char-equal? (get memory ptr) ']')
            (findmatch (+ ptr offset) (- value 1) offset)
            (findmatch (+ ptr offset) value offset)))))

    (define (while-enter)
      (if (= (get memory ptr) 0)
        (loop (findmatch (+ ptr 1) 1 1))
        (loop (+ ptr 1))))

    (define (while-exit)
      (loop (+ (findmatch (- ptr 1) -1 -1) 1)))

    (define c (get program ptr))

    (if (> ptr length)
      true
      (if (char-equal? c '>')
        (move 1)
        (if (char-equal? c '<')
          (move -1)
          (if (char-equal? c '+')
            (add 1)
            (if (char-equal? c '-')
              (add -1)
              (if (char-equal? c '[')
                (while-enter)
                (if (char-equal? c ']')
                  (while-exit)
                  (if (char-equal? c '.')
                    (output)
                    (if (char-equal? c ',')
                      (read)
                      false))))))))))
  (loop 0))





(define program (make-array Char 10000))

(define length (read_program program 0))

(interpret program)
